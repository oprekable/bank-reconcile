// Code generated by mockery v2.53.5. DO NOT EDIT.

package _mock

import (
	cmd "github.com/oprekable/bank-reconcile/cmd"
	cobra "github.com/spf13/cobra"

	mock "github.com/stretchr/testify/mock"
)

// Cmd is an autogenerated mock type for the Cmd type
type Cmd struct {
	mock.Mock
}

// Example provides a mock function with no fields
func (_m *Cmd) Example() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Example")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Init provides a mock function with given fields: metaData
func (_m *Cmd) Init(metaData *cmd.MetaData) *cobra.Command {
	ret := _m.Called(metaData)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 *cobra.Command
	if rf, ok := ret.Get(0).(func(*cmd.MetaData) *cobra.Command); ok {
		r0 = rf(metaData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cobra.Command)
		}
	}

	return r0
}

// PersistentPreRunner provides a mock function with given fields: cCmd, args
func (_m *Cmd) PersistentPreRunner(cCmd *cobra.Command, args []string) error {
	ret := _m.Called(cCmd, args)

	if len(ret) == 0 {
		panic("no return value specified for PersistentPreRunner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*cobra.Command, []string) error); ok {
		r0 = rf(cCmd, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Runner provides a mock function with given fields: cCmd, args
func (_m *Cmd) Runner(cCmd *cobra.Command, args []string) error {
	ret := _m.Called(cCmd, args)

	if len(ret) == 0 {
		panic("no return value specified for Runner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*cobra.Command, []string) error); ok {
		r0 = rf(cCmd, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCmd creates a new instance of Cmd. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCmd(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cmd {
	mock := &Cmd{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
